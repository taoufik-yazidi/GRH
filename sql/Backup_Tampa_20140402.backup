--
-- PostgreSQL database dump
--

-- Dumped from database version 9.2.3
-- Dumped by pg_dump version 9.2.3
-- Started on 2014-04-02 18:15:16

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- TOC entry 2076 (class 1262 OID 73735)
-- Dependencies: 2075
-- Name: Tampa; Type: COMMENT; Schema: -; Owner: usringenio
--

COMMENT ON DATABASE "Tampa" IS 'Base de datos de registro de visitantes';


--
-- TOC entry 185 (class 3079 OID 11727)
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- TOC entry 2079 (class 0 OID 0)
-- Dependencies: 185
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

--
-- TOC entry 601 (class 1247 OID 73927)
-- Name: t_clientes; Type: TYPE; Schema: public; Owner: usringenio
--

CREATE TYPE t_clientes AS (
	idcliente smallint,
	idtipodedocumento smallint,
	abreviatura character varying,
	tipodocumento character varying,
	numerodocumento character varying,
	direccion character varying,
	telefono character varying,
	correoelectronico character varying,
	responsable character varying,
	consejo character varying
);


ALTER TYPE public.t_clientes OWNER TO usringenio;

--
-- TOC entry 565 (class 1247 OID 73738)
-- Name: t_usuarios; Type: TYPE; Schema: public; Owner: usringenio
--

CREATE TYPE t_usuarios AS (
	idusuario integer,
	codigo character varying(25),
	nombres character varying(50),
	apellidos character varying(50),
	correo character varying(100),
	identificacion character varying(12),
	idperfil smallint,
	perfil character varying(25),
	perfilactivo boolean,
	cambiarclave boolean,
	fechacreacion timestamp without time zone,
	ultimoingreso timestamp without time zone,
	bloqueado boolean,
	fechabloqueado timestamp without time zone,
	fechadesbloqueado timestamp without time zone
);


ALTER TYPE public.t_usuarios OWNER TO usringenio;

--
-- TOC entry 231 (class 1255 OID 73924)
-- Name: fn_clientes_del(smallint); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_clientes_del(smallint) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	_idcliente alias for $1; -- Id de la tabla
BEGIN
	delete from clientes where idcliente = _idcliente;
	if found then
		return 1; -- Se elimino correctamente el registro
	else
		return 0; -- Error de la base de datos
	end if;
exception
	when foreign_key_violation then
		return -1; -- Error de violacion de FK
end;
$_$;


ALTER FUNCTION public.fn_clientes_del(smallint) OWNER TO usringenio;

--
-- TOC entry 2080 (class 0 OID 0)
-- Dependencies: 231
-- Name: FUNCTION fn_clientes_del(smallint); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_clientes_del(smallint) IS 'Funcion que permite actualizar clientes';


--
-- TOC entry 229 (class 1255 OID 73922)
-- Name: fn_clientes_ins(smallint, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_clientes_ins(smallint, character varying, character varying, character varying, character varying, character varying, character varying) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	_tipodocumento alias for $1;
	_numerodocumento alias for $2;
	_direccion alias for $3;
	_telefono alias for $4;
	_correoelectronico alias for $5;
	_responsable alias for $6;
	_consejo alias for $7;
begin
	insert into clientes values (default, _tipodocumento, _numerodocumento, _direccion, _telefono, _correoelectronico, _responsable, _consejo);
	if found then
		return currval('sqc_clientes'); -- Se ingreso correctamente el registro
	else
		return 0; -- Error de la base de datos
	end if;
exception
	when foreign_key_violation then
		return -1; -- Error de violacion de FK
	when unique_violation then
		return -2; -- Error de violacion de UK
end;
$_$;


ALTER FUNCTION public.fn_clientes_ins(smallint, character varying, character varying, character varying, character varying, character varying, character varying) OWNER TO usringenio;

--
-- TOC entry 2081 (class 0 OID 0)
-- Dependencies: 229
-- Name: FUNCTION fn_clientes_ins(smallint, character varying, character varying, character varying, character varying, character varying, character varying); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_clientes_ins(smallint, character varying, character varying, character varying, character varying, character varying, character varying) IS 'Funcion que permite...';


--
-- TOC entry 232 (class 1255 OID 73928)
-- Name: fn_clientes_sel(smallint, smallint, character varying); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_clientes_sel(smallint DEFAULT (-1), smallint DEFAULT (-1), character varying DEFAULT ''::character varying) RETURNS SETOF t_clientes
    LANGUAGE plpgsql
    AS $_$
declare
  tip alias for $1; -- Tipo de busqueda
  idc alias for $2; -- Id del cliente
  ndd alias for $3; -- Numero de documento
  consulta TEXT = 'select idcliente, idtipodedocumento, abreviatura, tipodedocumento, numerodocumento, direccion, telefono, correoelectronico, responsable, consejo from clientes inner join tiposdedocumento on tipodocumento = idtipodedocumento';
begin
  if tip=0 then -- Consulta de todos los registros
    consulta = consulta;
  elsif tip=1 then -- Consulta por id de cliente
    consulta = consulta || ' where idcliente = ' || idc;
  elsif tip=2 then -- Consulta por numero de documento
    consulta = consulta || ' where numerodocumento = ' || quote_literal(ndd);
  end if;
  return query execute consulta;
end;
$_$;


ALTER FUNCTION public.fn_clientes_sel(smallint, smallint, character varying) OWNER TO usringenio;

--
-- TOC entry 2082 (class 0 OID 0)
-- Dependencies: 232
-- Name: FUNCTION fn_clientes_sel(smallint, smallint, character varying); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_clientes_sel(smallint, smallint, character varying) IS 'Funcion que consulta los registros de la tabla clientes';


--
-- TOC entry 230 (class 1255 OID 73923)
-- Name: fn_clientes_upd(smallint, smallint, character varying, character varying, character varying, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_clientes_upd(smallint, smallint, character varying, character varying, character varying, character varying, character varying, character varying) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	_idcliente alias for $1;
	_tipodocumento alias for $2;
	_numerodocumento alias for $3;
	_direccion alias for $4;
	_telefono alias for $5;
	_correoelectronico alias for $6;
	_responsable alias for $7;
	_consejo alias for $8;
BEGIN
	update clientes set tipodocumento = _tipodocumento, numerodocumento = _numerodocumento, direccion = _direccion, telefono = _telefono, correoelectronico = _correoelectronico, responsable = _responsable, consejo = _consejo where idcliente = _idcliente;
	if found then
		return 1; -- Se actualizo correctamente
	else
		return 0; -- Error de la BD
	end if;
exception
	when foreign_key_violation then
		return -1; -- Error de violacion de FK
	when unique_violation then
		return -2; -- Error de violacion de UK
end;
$_$;


ALTER FUNCTION public.fn_clientes_upd(smallint, smallint, character varying, character varying, character varying, character varying, character varying, character varying) OWNER TO usringenio;

--
-- TOC entry 2083 (class 0 OID 0)
-- Dependencies: 230
-- Name: FUNCTION fn_clientes_upd(smallint, smallint, character varying, character varying, character varying, character varying, character varying, character varying); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_clientes_upd(smallint, smallint, character varying, character varying, character varying, character varying, character varying, character varying) IS 'Funcion que permite actualizar clientes';


--
-- TOC entry 198 (class 1255 OID 73739)
-- Name: fn_configuracion_del(smallint); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_configuracion_del(smallint) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	idconf alias for $1;
BEGIN
	delete from configuracion where idconfiguracion = idconf;
	if found then
		return 1; -- Se borro correctamente
	else
		return 0; -- Error de la base de datos
	end if;
END;
$_$;


ALTER FUNCTION public.fn_configuracion_del(smallint) OWNER TO usringenio;

--
-- TOC entry 2084 (class 0 OID 0)
-- Dependencies: 198
-- Name: FUNCTION fn_configuracion_del(smallint); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_configuracion_del(smallint) IS 'Funcion que permite borrar parametros en la tabla configuracion';


--
-- TOC entry 199 (class 1255 OID 73740)
-- Name: fn_configuracion_ins(character varying, character varying, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_configuracion_ins(character varying, character varying, boolean DEFAULT true) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	param alias for $1;
	valor alias for $2;
	activ alias for $3;
BEGIN
	insert into configuracion values (default, param, valor, activ);
	if found then
		return currval('sqc_configuracion'); -- Se ingreso correctamente el parametro
	else
		return 0; -- Error de la base de datos
	end if;
END;
$_$;


ALTER FUNCTION public.fn_configuracion_ins(character varying, character varying, boolean) OWNER TO usringenio;

--
-- TOC entry 2085 (class 0 OID 0)
-- Dependencies: 199
-- Name: FUNCTION fn_configuracion_ins(character varying, character varying, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_configuracion_ins(character varying, character varying, boolean) IS 'Funcion que permite insertar parametros en la tabla configuracion';


--
-- TOC entry 169 (class 1259 OID 73741)
-- Name: sqc_configuracion; Type: SEQUENCE; Schema: public; Owner: usringenio
--

CREATE SEQUENCE sqc_configuracion
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sqc_configuracion OWNER TO usringenio;

--
-- TOC entry 2086 (class 0 OID 0)
-- Dependencies: 169
-- Name: SEQUENCE sqc_configuracion; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON SEQUENCE sqc_configuracion IS 'Secuencia para el consecutivo de la tabla configuracion';


SET default_tablespace = '';

SET default_with_oids = false;

--
-- TOC entry 170 (class 1259 OID 73743)
-- Name: configuracion; Type: TABLE; Schema: public; Owner: usringenio; Tablespace: 
--

CREATE TABLE configuracion (
    idconfiguracion smallint DEFAULT nextval('sqc_configuracion'::regclass) NOT NULL,
    parametro character varying(50) NOT NULL,
    valorparametro character varying(50) NOT NULL,
    activo boolean DEFAULT true NOT NULL
);


ALTER TABLE public.configuracion OWNER TO usringenio;

--
-- TOC entry 2087 (class 0 OID 0)
-- Dependencies: 170
-- Name: TABLE configuracion; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON TABLE configuracion IS 'Tabla que contiene la configuracion general del sistema';


--
-- TOC entry 2088 (class 0 OID 0)
-- Dependencies: 170
-- Name: COLUMN configuracion.idconfiguracion; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN configuracion.idconfiguracion IS 'Consecutivo de configuracion';


--
-- TOC entry 2089 (class 0 OID 0)
-- Dependencies: 170
-- Name: COLUMN configuracion.parametro; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN configuracion.parametro IS 'Nombre del parametro de configuracion';


--
-- TOC entry 2090 (class 0 OID 0)
-- Dependencies: 170
-- Name: COLUMN configuracion.valorparametro; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN configuracion.valorparametro IS 'Valor del parametro de configuracion';


--
-- TOC entry 2091 (class 0 OID 0)
-- Dependencies: 170
-- Name: COLUMN configuracion.activo; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN configuracion.activo IS 'Identifica si el parametro esta activo o no';


--
-- TOC entry 200 (class 1255 OID 73748)
-- Name: fn_configuracion_sel(smallint, character varying, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_configuracion_sel(smallint DEFAULT (-1), character varying DEFAULT 'NINGUNO'::character varying, boolean DEFAULT true) RETURNS SETOF configuracion
    LANGUAGE plpgsql
    AS $_$
declare
	tipo alias for $1;
	para alias for $2;
	acti alias for $3;
begin
	if tipo = 0 then -- Consulta todos los parametros
		return query select idconfiguracion, parametro, valorparametro, activo from configuracion;
	elsif tipo = 1 then -- Consulta de un parametro especifico
		return query select idconfiguracion, parametro, valorparametro, activo from configuracion where parametro = upper(para);
	end if;
end;
$_$;


ALTER FUNCTION public.fn_configuracion_sel(smallint, character varying, boolean) OWNER TO usringenio;

--
-- TOC entry 2092 (class 0 OID 0)
-- Dependencies: 200
-- Name: FUNCTION fn_configuracion_sel(smallint, character varying, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_configuracion_sel(smallint, character varying, boolean) IS 'Funcion que consulta los registros de la tabla configuracion';


--
-- TOC entry 201 (class 1255 OID 73749)
-- Name: fn_configuracion_upd(smallint, character varying, character varying, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_configuracion_upd(smallint, character varying, character varying, boolean) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	idconf alias for $1;
	parame alias for $2;
	valorp alias for $3;
	activa alias for $4;
BEGIN
	update configuracion set parametro = upper(parame), valorparametro = upper(valorp), activo = activa where idconfiguracion = idconf;
	if found then
		return 1; -- Se actualizó correctamente
	else
		return 0; -- Error de la base de datos
	end if;
END;
$_$;


ALTER FUNCTION public.fn_configuracion_upd(smallint, character varying, character varying, boolean) OWNER TO usringenio;

--
-- TOC entry 2093 (class 0 OID 0)
-- Dependencies: 201
-- Name: FUNCTION fn_configuracion_upd(smallint, character varying, character varying, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_configuracion_upd(smallint, character varying, character varying, boolean) IS 'Funcion que permite actualizar parametros en la tabla configuracion';


--
-- TOC entry 233 (class 1255 OID 73931)
-- Name: fn_contar_registros(character varying); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_contar_registros(character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
	tabla alias for $1;
	consulta TEXT = 'select count(*) from ' || tabla;
	resultado integer;
begin
	execute consulta into resultado;
	return resultado;
end;
$_$;


ALTER FUNCTION public.fn_contar_registros(character varying) OWNER TO usringenio;

--
-- TOC entry 2094 (class 0 OID 0)
-- Dependencies: 233
-- Name: FUNCTION fn_contar_registros(character varying); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_contar_registros(character varying) IS 'Funcion que permite consultar la cantidad de registros de determinada tabla';


--
-- TOC entry 202 (class 1255 OID 73750)
-- Name: fn_credenciales_del(integer); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_credenciales_del(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
  idc alias for $1;
begin
  delete from credenciales where cre_id=idc;
  perform fn_credenciales_delall();
  return 1;
end;
$_$;


ALTER FUNCTION public.fn_credenciales_del(integer) OWNER TO usringenio;

--
-- TOC entry 2095 (class 0 OID 0)
-- Dependencies: 202
-- Name: FUNCTION fn_credenciales_del(integer); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_credenciales_del(integer) IS 'Funcion que borra la credencial del usuario actual y llama la funcion de borrado de las credenciales que excedieron el tiempo de inactividad';


--
-- TOC entry 203 (class 1255 OID 73751)
-- Name: fn_credenciales_delall(); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_credenciales_delall() RETURNS void
    LANGUAGE plpgsql
    AS $$
begin
  delete from credenciales where (extract(epoch from now()-cre_ultimaaccion)/60)::integer > (select valorparametro::integer from configuracion where parametro = 'TIEMPOCREDENCIAL' limit 1);
end;
$$;


ALTER FUNCTION public.fn_credenciales_delall() OWNER TO usringenio;

--
-- TOC entry 2096 (class 0 OID 0)
-- Dependencies: 203
-- Name: FUNCTION fn_credenciales_delall(); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_credenciales_delall() IS 'Funcion que borra las credenciales que excedieron el tiempo limite de inactividad';


--
-- TOC entry 204 (class 1255 OID 73752)
-- Name: fn_credenciales_ins(integer, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_credenciales_ins(integer, character varying, character varying, character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
  idu alias for $1;
  nom alias for $2;
  hip alias for $3;
  hno alias for $4;
begin
  insert into credenciales values (default, idu, nom, hip, hno, default, default);
  if found then
    return currval('sqc_credencial'); -- Se ingreso correctamente la credencial
  else
    return 0; -- Error de la base de datos
  end if;
exception
  when foreign_key_violation then
    return -1; -- No se puede ingresar un usuario que no existe
end;
$_$;


ALTER FUNCTION public.fn_credenciales_ins(integer, character varying, character varying, character varying) OWNER TO usringenio;

--
-- TOC entry 2097 (class 0 OID 0)
-- Dependencies: 204
-- Name: FUNCTION fn_credenciales_ins(integer, character varying, character varying, character varying); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_credenciales_ins(integer, character varying, character varying, character varying) IS 'Funcion que permite ingresar registros a la tabla credenciales';


--
-- TOC entry 171 (class 1259 OID 73753)
-- Name: sqc_credencial; Type: SEQUENCE; Schema: public; Owner: usringenio
--

CREATE SEQUENCE sqc_credencial
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
    CYCLE;


ALTER TABLE public.sqc_credencial OWNER TO usringenio;

--
-- TOC entry 2098 (class 0 OID 0)
-- Dependencies: 171
-- Name: SEQUENCE sqc_credencial; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON SEQUENCE sqc_credencial IS 'Secuencia de las credenciales';


--
-- TOC entry 172 (class 1259 OID 73755)
-- Name: credenciales; Type: TABLE; Schema: public; Owner: usringenio; Tablespace: 
--

CREATE TABLE credenciales (
    cre_id integer DEFAULT nextval('sqc_credencial'::regclass) NOT NULL,
    cre_idusuario integer NOT NULL,
    cre_nombre character varying(110) NOT NULL,
    cre_hostip character varying(50) NOT NULL,
    cre_hostnombre character varying(50) NOT NULL,
    cre_creacion timestamp without time zone DEFAULT now() NOT NULL,
    cre_ultimaaccion timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.credenciales OWNER TO usringenio;

--
-- TOC entry 2099 (class 0 OID 0)
-- Dependencies: 172
-- Name: TABLE credenciales; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON TABLE credenciales IS 'Tabla que contendra temporalemente las credenciales de los usuarios que ingresan correctamente';


--
-- TOC entry 205 (class 1255 OID 73761)
-- Name: fn_credenciales_sel(smallint, integer); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_credenciales_sel(smallint, integer) RETURNS SETOF credenciales
    LANGUAGE plpgsql
    AS $_$
declare
  tip alias for $1;
  idc alias for $2;
begin
  if tip=0 then -- Consulta por id de credencial
    return query select * from credenciales where cre_id=idc;
  elsif tip=1 then -- Consulta de todas las credenciales
    return query select * from credenciales;
  end if;
end;
$_$;


ALTER FUNCTION public.fn_credenciales_sel(smallint, integer) OWNER TO usringenio;

--
-- TOC entry 2100 (class 0 OID 0)
-- Dependencies: 205
-- Name: FUNCTION fn_credenciales_sel(smallint, integer); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_credenciales_sel(smallint, integer) IS 'Funcion que consulta o selecciona las credenciales';


--
-- TOC entry 206 (class 1255 OID 73762)
-- Name: fn_credenciales_upd(integer); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_credenciales_upd(integer) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
  idc alias for $1;
begin
  update credenciales set cre_ultimaaccion=now() where cre_id=idc;
  if found then
    return 1; -- Actualizacion correcta
  else
    return 2; -- No existe la credencial a actualizar
  end if;
end;
$_$;


ALTER FUNCTION public.fn_credenciales_upd(integer) OWNER TO usringenio;

--
-- TOC entry 2101 (class 0 OID 0)
-- Dependencies: 206
-- Name: FUNCTION fn_credenciales_upd(integer); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_credenciales_upd(integer) IS 'Funcion que permite actualizar la fecha y hora de la ultima accion realizada desde el aplicativo';


--
-- TOC entry 207 (class 1255 OID 73763)
-- Name: fn_credenciales_val(integer, integer); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_credenciales_val(integer, integer) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
  idc alias for $1;
  idu alias for $2;
  can int;
begin
  select count(*) into can from credenciales 
      where cre_id=idc and cre_idusuario=idu 
      and (select extract(epoch from (now()-cre_ultimaaccion))/60)<=(select valorparametro::integer from configuracion where parametro = 'TIEMPOCREDENCIAL' limit 1);
  return can;
end;
$_$;


ALTER FUNCTION public.fn_credenciales_val(integer, integer) OWNER TO usringenio;

--
-- TOC entry 2102 (class 0 OID 0)
-- Dependencies: 207
-- Name: FUNCTION fn_credenciales_val(integer, integer); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_credenciales_val(integer, integer) IS 'Funcion que valida si la credencial existe o no';


--
-- TOC entry 208 (class 1255 OID 73764)
-- Name: fn_objetos_del(character varying); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_objetos_del(character varying) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	cod alias for $1;
begin
	delete from objetos where obj_codigo=cod;
	if found then
		return 1; -- Se borro el registro
	else
		return 2; -- Error de base de datos
	end if;
exception
	when foreign_key_violation then
		return 3; -- Existe informacion foranea
end;
$_$;


ALTER FUNCTION public.fn_objetos_del(character varying) OWNER TO usringenio;

--
-- TOC entry 2103 (class 0 OID 0)
-- Dependencies: 208
-- Name: FUNCTION fn_objetos_del(character varying); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_objetos_del(character varying) IS 'Funcion que permite borrar registros de la tabla objetos';


--
-- TOC entry 209 (class 1255 OID 73765)
-- Name: fn_objetos_ins(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_objetos_ins(character varying, character varying, character varying) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	cod alias for $1;
	nom alias for $2;
	des alias for $3;
begin
	insert into objetos (obj_codigo, obj_nombre, obj_descripcion, obj_activo) values (cod, nom, des, default);
	if found then
		return 1; -- Se ingreso correctamente el registro
	else
		return 2; -- Error en la base de datos
	end if;
exception
	when unique_violation then
		return 3; -- Ya existe ese codigo
end;
$_$;


ALTER FUNCTION public.fn_objetos_ins(character varying, character varying, character varying) OWNER TO usringenio;

--
-- TOC entry 2104 (class 0 OID 0)
-- Dependencies: 209
-- Name: FUNCTION fn_objetos_ins(character varying, character varying, character varying); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_objetos_ins(character varying, character varying, character varying) IS 'Funcion que permite ingresar registros a la tabla objetos';


--
-- TOC entry 173 (class 1259 OID 73766)
-- Name: objetos; Type: TABLE; Schema: public; Owner: usringenio; Tablespace: 
--

CREATE TABLE objetos (
    obj_codigo character varying(15) NOT NULL,
    obj_nombre character varying(50) NOT NULL,
    obj_descripcion character varying(100) NOT NULL,
    obj_activo boolean DEFAULT true NOT NULL
);


ALTER TABLE public.objetos OWNER TO usringenio;

--
-- TOC entry 2105 (class 0 OID 0)
-- Dependencies: 173
-- Name: TABLE objetos; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON TABLE objetos IS 'Tabla que contiene los objetos del aplicativo';


--
-- TOC entry 210 (class 1255 OID 73770)
-- Name: fn_objetos_sel(smallint, character varying, character varying, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_objetos_sel(smallint, character varying, character varying, boolean) RETURNS SETOF objetos
    LANGUAGE plpgsql
    AS $_$
declare
	tip alias for $1;
	cod alias for $2;
	nom alias for $3;
	act alias for $4;
begin
	if tip=0 then -- Consulta por codigo
		return query select obj_codigo, obj_nombre, obj_descripcion, obj_activo from objetos where obj_codigo=cod;
	elsif tip=1 then -- Conslta por nombre
		return query select obj_codigo, obj_nombre, obj_descripcion, obj_activo from objetos where obj_nombre like nom;
	elsif tip=2 then -- Consulta por activo
		return query select obj_codigo, obj_nombre, obj_descripcion, obj_activo from objetos where obj_activo=act;
	elsif tip=3 then -- Consulta de todos los registros
		return query select obj_codigo, obj_nombre, obj_descripcion, obj_activo from objetos;
	end if;
end;
$_$;


ALTER FUNCTION public.fn_objetos_sel(smallint, character varying, character varying, boolean) OWNER TO usringenio;

--
-- TOC entry 2106 (class 0 OID 0)
-- Dependencies: 210
-- Name: FUNCTION fn_objetos_sel(smallint, character varying, character varying, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_objetos_sel(smallint, character varying, character varying, boolean) IS 'Funcion que retorna los objetos';


--
-- TOC entry 211 (class 1255 OID 73771)
-- Name: fn_objetos_upd(character varying, character varying, character varying, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_objetos_upd(character varying, character varying, character varying, boolean) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	cod alias for $1;
	nom alias for $2;
	des alias for $3;
	act alias for $4;
begin
	update objetos set obj_nombre=nom, obj_descripcion=des, obj_activo=act where obj_codigo=cod;
	if found then
		return 1;
	else
		return 2;
	end if;
end;
$_$;


ALTER FUNCTION public.fn_objetos_upd(character varying, character varying, character varying, boolean) OWNER TO usringenio;

--
-- TOC entry 2107 (class 0 OID 0)
-- Dependencies: 211
-- Name: FUNCTION fn_objetos_upd(character varying, character varying, character varying, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_objetos_upd(character varying, character varying, character varying, boolean) IS 'Funcion que permite actualizar la informacion de la tabla objetos';


--
-- TOC entry 212 (class 1255 OID 73772)
-- Name: fn_objetosxperfil_triupdobj(); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_objetosxperfil_triupdobj() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	insert into objetosxperfil select idperfil, NEW.obj_codigo, false, false, false, false from perfiles;
return new;
end;
$$;


ALTER FUNCTION public.fn_objetosxperfil_triupdobj() OWNER TO usringenio;

--
-- TOC entry 2108 (class 0 OID 0)
-- Dependencies: 212
-- Name: FUNCTION fn_objetosxperfil_triupdobj(); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_objetosxperfil_triupdobj() IS 'Funcion que permite actualizar la tabla objetosxperfil cuando se crea un nuevo objeto';


--
-- TOC entry 213 (class 1255 OID 73773)
-- Name: fn_objetosxperfil_triupdper(); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_objetosxperfil_triupdper() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	insert into objetosxperfil select NEW.idperfil, obj_codigo, false, false, false, false from objetos;
return new;
end;
$$;


ALTER FUNCTION public.fn_objetosxperfil_triupdper() OWNER TO usringenio;

--
-- TOC entry 2109 (class 0 OID 0)
-- Dependencies: 213
-- Name: FUNCTION fn_objetosxperfil_triupdper(); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_objetosxperfil_triupdper() IS 'Funcion que permite actualizar la tabla objetosxperfil cuando se crea un nuevo perfil';


--
-- TOC entry 214 (class 1255 OID 73774)
-- Name: fn_objetosxperfil_val(smallint, smallint, character varying); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_objetosxperfil_val(smallint, smallint, character varying) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	tip alias for $1;
	per alias for $2;
	obj alias for $3;
	res smallint := 0;
begin
	if tip=1 then -- Si es insertar
		select count(*) into res from objetosxperfil where oxp_perfil=per and oxp_objeto=obj and oxp_insertar=true;
	elsif tip=2 then -- Si es modificar
		select count(*) into res from objetosxperfil where oxp_perfil=per and oxp_objeto=obj and oxp_modificar=true;
	elsif tip=3 then -- Si es borrar
		select count(*) into res from objetosxperfil where oxp_perfil=per and oxp_objeto=obj and oxp_borrar=true;
	elsif tip=4 then -- Si es consultar
		select count(*) into res from objetosxperfil where oxp_perfil=per and oxp_objeto=obj and oxp_consultar=true;
	end if;
return res;
end;
$_$;


ALTER FUNCTION public.fn_objetosxperfil_val(smallint, smallint, character varying) OWNER TO usringenio;

--
-- TOC entry 2110 (class 0 OID 0)
-- Dependencies: 214
-- Name: FUNCTION fn_objetosxperfil_val(smallint, smallint, character varying); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_objetosxperfil_val(smallint, smallint, character varying) IS 'Funcion que busca el permiso del perfil';


--
-- TOC entry 215 (class 1255 OID 73775)
-- Name: fn_perfiles_del(smallint); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_perfiles_del(smallint) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	idp alias for $1;
	res smallint :=0; -- Esta variable devolvera la respuesta (si es 0 no realizo ningun trabajo)
begin
	perform * from perfiles where idperfil = idp;
	if found then
		delete from perfiles where idperfil=idp;
		if found then
			res := 1; -- Se borro correctamente el registro
		end if;
	else
		res := 2; -- No existe el perfil a eliminar
	end if;
return res;
exception when foreign_key_violation then
return 3; -- Si este registro tiene hijos, se devuelve 3 para informar
end;
$_$;


ALTER FUNCTION public.fn_perfiles_del(smallint) OWNER TO usringenio;

--
-- TOC entry 2111 (class 0 OID 0)
-- Dependencies: 215
-- Name: FUNCTION fn_perfiles_del(smallint); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_perfiles_del(smallint) IS 'Funcion que borra registros de la tabla perfiles';


--
-- TOC entry 216 (class 1255 OID 73776)
-- Name: fn_perfiles_ins(smallint, character varying, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_perfiles_ins(smallint, character varying, boolean) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
  idp alias for $1;
  nom alias for $2;
  act alias for $3; 
  respuesta smallint := 0; -- Es el valor devuelto por la funcion (si es 0 no realizo ningun trabajo)
begin
      perform * from perfiles where nombre=nom;
      if not found then
         insert into perfiles values (idp, nom, act);
         if found then
            respuesta := 1; -- Se ingreso correctamente
         end if;
      else
         respuesta := 2; -- Ya existe el nombre del perfil
      end if;
return respuesta;
exception when unique_violation then
return 3; -- Si el codigo ya existe, no se inserta y se avisa.
end;
$_$;


ALTER FUNCTION public.fn_perfiles_ins(smallint, character varying, boolean) OWNER TO usringenio;

--
-- TOC entry 2112 (class 0 OID 0)
-- Dependencies: 216
-- Name: FUNCTION fn_perfiles_ins(smallint, character varying, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_perfiles_ins(smallint, character varying, boolean) IS 'Funcion que inserta datos en la tabla perfiles';


--
-- TOC entry 174 (class 1259 OID 73777)
-- Name: perfiles; Type: TABLE; Schema: public; Owner: usringenio; Tablespace: 
--

CREATE TABLE perfiles (
    idperfil smallint NOT NULL,
    nombre character varying(25) NOT NULL,
    activo boolean DEFAULT true NOT NULL
);


ALTER TABLE public.perfiles OWNER TO usringenio;

--
-- TOC entry 2113 (class 0 OID 0)
-- Dependencies: 174
-- Name: TABLE perfiles; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON TABLE perfiles IS 'Tabla que contiene los perfiles de los usuarios del sistema';


--
-- TOC entry 217 (class 1255 OID 73781)
-- Name: fn_perfiles_sel(smallint, smallint, character varying, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_perfiles_sel(smallint, smallint, character varying, boolean) RETURNS SETOF perfiles
    LANGUAGE plpgsql
    AS $_$
declare
	tip alias for $1;
	idp alias for $2;
	nom alias for $3;
	act alias for $4;
begin
	if tip=0 then -- Si el tipo de consulta es todos
		return query select idperfil, nombre, activo from perfiles;
	elsif tip=1 then -- Si el tipo de consulta es por idperfil
		return query select idperfil, nombre, activo from perfiles where idperfil=idp;
	elsif tip=2 then -- Si el tipo de consulta es por nombre del perfil
		return query select idperfil, nombre, activo from perfiles where nombre like nom;
	elsif tip=3 then -- Si el tipo de consulta es por si esta activo o no
		return query select idperfil, nombre, activo from perfiles where activo = act;
	end if;
end;$_$;


ALTER FUNCTION public.fn_perfiles_sel(smallint, smallint, character varying, boolean) OWNER TO usringenio;

--
-- TOC entry 2114 (class 0 OID 0)
-- Dependencies: 217
-- Name: FUNCTION fn_perfiles_sel(smallint, smallint, character varying, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_perfiles_sel(smallint, smallint, character varying, boolean) IS 'Funcion que permite consultar la tabla perfiles';


--
-- TOC entry 218 (class 1255 OID 73782)
-- Name: fn_perfiles_upd(smallint, character varying, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_perfiles_upd(smallint, character varying, boolean) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	idp alias for $1;
	nom alias for $2;
	act alias for $3;
	res smallint := 0; -- Este es el valor a devolver (si es 0 no realizo ningun trabajo)
begin
	perform * from perfiles where idperfil=idp;
	if found then -- Si existe el codigo del perfil a modificar entonces:
	   perform * from perfiles where nombre=nom and idperfil<>idp;
	   if not found then
		update perfiles set nombre=nom, activo=act where idperfil=idp;
		if found then
			res := 1; -- Actualizacion correcta
		end if;
	   else
		res :=2; -- Ya existe ese nombre de perfil
	   end if;
	else -- Si no existe el codigo del perfil, no se hace nada
		res := 3;
	end if;
return res;
end;
$_$;


ALTER FUNCTION public.fn_perfiles_upd(smallint, character varying, boolean) OWNER TO usringenio;

--
-- TOC entry 2115 (class 0 OID 0)
-- Dependencies: 218
-- Name: FUNCTION fn_perfiles_upd(smallint, character varying, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_perfiles_upd(smallint, character varying, boolean) IS 'Funcion que actualiza la tabla perfiles';


--
-- TOC entry 226 (class 1255 OID 73783)
-- Name: fn_tiposdedocumento_del(smallint); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_tiposdedocumento_del(smallint) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	itd alias for $1;
begin
	perform * from tiposdedocumento where idtipodedocumento = itd;
	if found then
		delete from tiposdedocumento where idtipodedocumento=itd;
		if found then
			return 1; -- Se borro correctamente el registro
		end if;
	else
		return 0; -- No existe el perfil a eliminar
	end if;
return res;
exception
	when foreign_key_violation then
		return -1; -- Si este registro tiene hijos, se devuelve 3 para informar
	when unique_violation then
		return -2; -- Si ya existe
end;
$_$;


ALTER FUNCTION public.fn_tiposdedocumento_del(smallint) OWNER TO usringenio;

--
-- TOC entry 2116 (class 0 OID 0)
-- Dependencies: 226
-- Name: FUNCTION fn_tiposdedocumento_del(smallint); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_tiposdedocumento_del(smallint) IS 'Funcion que borra registros de la tabla tipos de documento';


--
-- TOC entry 225 (class 1255 OID 73784)
-- Name: fn_tiposdedocumento_ins(character varying, character varying, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_tiposdedocumento_ins(character varying, character varying, boolean) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
  abr alias for $1;
  nom alias for $2;
  act alias for $3; 
  respuesta smallint := 0; -- Es el valor devuelto por la funcion (si es 0 no realizo ningun trabajo)
begin
      insert into tiposdedocumento (abreviatura, tipodedocumento, activo) values (abr, nom, act);
      if found then
          return currval('sqc_tiposdocumento'); -- Se ingreso correctamente el registro
      else
          return 0; -- Error de la base de datos
      end if;
exception
	when foreign_key_violation then
		return -1; -- Error de violacion de FK
	when unique_violation then
		return -2; -- Si el codigo ya existe, no se inserta y se avisa.
end;
$_$;


ALTER FUNCTION public.fn_tiposdedocumento_ins(character varying, character varying, boolean) OWNER TO usringenio;

--
-- TOC entry 2117 (class 0 OID 0)
-- Dependencies: 225
-- Name: FUNCTION fn_tiposdedocumento_ins(character varying, character varying, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_tiposdedocumento_ins(character varying, character varying, boolean) IS 'Funcion que inserta datos en la tabla tiposdedocumento';


--
-- TOC entry 175 (class 1259 OID 73785)
-- Name: sqc_tiposdocumento; Type: SEQUENCE; Schema: public; Owner: usringenio
--

CREATE SEQUENCE sqc_tiposdocumento
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sqc_tiposdocumento OWNER TO usringenio;

--
-- TOC entry 176 (class 1259 OID 73787)
-- Name: tiposdedocumento; Type: TABLE; Schema: public; Owner: usringenio; Tablespace: 
--

CREATE TABLE tiposdedocumento (
    idtipodedocumento smallint DEFAULT nextval('sqc_tiposdocumento'::regclass) NOT NULL,
    abreviatura character varying(2) NOT NULL,
    tipodedocumento character varying(25) NOT NULL,
    activo boolean DEFAULT true NOT NULL
);


ALTER TABLE public.tiposdedocumento OWNER TO usringenio;

--
-- TOC entry 2118 (class 0 OID 0)
-- Dependencies: 176
-- Name: TABLE tiposdedocumento; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON TABLE tiposdedocumento IS 'Tabla que contiene los tipos de documento';


--
-- TOC entry 2119 (class 0 OID 0)
-- Dependencies: 176
-- Name: COLUMN tiposdedocumento.idtipodedocumento; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN tiposdedocumento.idtipodedocumento IS 'Identificador unico del tipo de documento';


--
-- TOC entry 2120 (class 0 OID 0)
-- Dependencies: 176
-- Name: COLUMN tiposdedocumento.abreviatura; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN tiposdedocumento.abreviatura IS 'Abreviatura del tipo de documento';


--
-- TOC entry 2121 (class 0 OID 0)
-- Dependencies: 176
-- Name: COLUMN tiposdedocumento.tipodedocumento; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN tiposdedocumento.tipodedocumento IS 'Nombre del tipo de documento';


--
-- TOC entry 2122 (class 0 OID 0)
-- Dependencies: 176
-- Name: COLUMN tiposdedocumento.activo; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN tiposdedocumento.activo IS 'Identifica si el tipo de documento está activo o no';


--
-- TOC entry 234 (class 1255 OID 73934)
-- Name: fn_tiposdedocumento_sel(smallint, smallint, character varying, character varying, boolean, integer, integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_tiposdedocumento_sel(smallint, smallint, character varying, character varying, boolean, integer DEFAULT 1, integer DEFAULT 5, integer DEFAULT 1, character varying DEFAULT 'asc'::character varying) RETURNS SETOF tiposdedocumento
    LANGUAGE plpgsql
    AS $_$
declare
	tip alias for $1;
	idt alias for $2;
	abr alias for $3;
	nom alias for $4;
	act alias for $5;
	pagina alias for $6;
	limite alias for $7;
	colind alias for $8;
	coldir alias for $9;
	inicio integer;
	consulta TEXT = 'select idtipodedocumento, abreviatura, tipodedocumento, activo from tiposdedocumento';
begin
	inicio = limite * pagina - limite;
	if tip=0 then -- Si el tipo de consulta es todos
		consulta = consulta;
	elsif tip=1 then -- Si el tipo de consulta es por idtipodedocumento
		consulta = consulta || ' where idtipodedocumento = ' || idt;
	elsif tip=2 then -- Si el tipo de consulta es por abreviatura del tipodedocumento
		consulta = consulta || ' where abreviatura like ' || quote_literal(abr);
	elsif tip=3 then -- Si el tipo de consulta es por el nombre del tipo de documento
		consulta = consulta || ' where tipodedocumento like ' || quote_literal(nom);
	elsif tip=4 then -- Si el tipo de consulta es por activo
		consulta = consulta || ' where activo = ' || act;
	end if;
	consulta = consulta || ' order by ' || colind || ' ' || coldir || ' limit ' || limite || ' offset ' || inicio;
	return query execute consulta;
end;
$_$;


ALTER FUNCTION public.fn_tiposdedocumento_sel(smallint, smallint, character varying, character varying, boolean, integer, integer, integer, character varying) OWNER TO usringenio;

--
-- TOC entry 2123 (class 0 OID 0)
-- Dependencies: 234
-- Name: FUNCTION fn_tiposdedocumento_sel(smallint, smallint, character varying, character varying, boolean, integer, integer, integer, character varying); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_tiposdedocumento_sel(smallint, smallint, character varying, character varying, boolean, integer, integer, integer, character varying) IS 'Funcion que permite consultar la tabla tipos de documento';


--
-- TOC entry 219 (class 1255 OID 73793)
-- Name: fn_tiposdedocumento_upd(smallint, character varying, character varying, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_tiposdedocumento_upd(smallint, character varying, character varying, boolean) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
	itd alias for $1;
	abr alias for $2;
	tdd alias for $3;
	act alias for $4;
begin
    update tiposdedocumento set abreviatura = abr, tipodedocumento=tdd, activo=act where idtipodedocumento=itd;
    if found then
	return 1; -- Actualizacion correcta
    else -- Si no existe el codigo del tipo de documento, no se hace nada
	return 0; -- No existe el código del tipo de documento
    end if;
exception 
	when foreign_key_violation then
		return -1; -- Error de violacion de FK
	when unique_violation then
		return -2; -- Excepcion de unique violation
end;
$_$;


ALTER FUNCTION public.fn_tiposdedocumento_upd(smallint, character varying, character varying, boolean) OWNER TO usringenio;

--
-- TOC entry 2124 (class 0 OID 0)
-- Dependencies: 219
-- Name: FUNCTION fn_tiposdedocumento_upd(smallint, character varying, character varying, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_tiposdedocumento_upd(smallint, character varying, character varying, boolean) IS 'Funcion que actualiza la tabla tipos de documento';


--
-- TOC entry 220 (class 1255 OID 73794)
-- Name: fn_usuarios_blo(integer, boolean); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_usuarios_blo(integer, boolean) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
DECLARE
  ide alias for $1;
  blo alias for $2;
BEGIN
  perform * from usuarios where usu_id = ide and usu_bloqueado = blo;
  IF FOUND THEN
    return 1; -- El usuario ya se encuentra en el estado solicitado
  ELSE
    IF blo = true THEN
      update usuarios set usu_bloqueado = true and usu_fechabloqueado = now();
      IF FOUND THEN
        return 2; -- BLOQUEADO CORRECTAMENTE
      END IF;
    ELSE
      update usuarios set usu_bloqueado = false and usu_fechadesbloqueado = now();
      IF FOUND THEN
        return 2; -- DESBLOQUEADO CORRECTAMENTE
      END IF;
    END IF;
  END IF;
END;
$_$;


ALTER FUNCTION public.fn_usuarios_blo(integer, boolean) OWNER TO usringenio;

--
-- TOC entry 2125 (class 0 OID 0)
-- Dependencies: 220
-- Name: FUNCTION fn_usuarios_blo(integer, boolean); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_usuarios_blo(integer, boolean) IS 'Funcion que permite bloquear o desbloquear un usuario';


--
-- TOC entry 221 (class 1255 OID 73795)
-- Name: fn_usuarios_cla(integer, character varying, character varying); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_usuarios_cla(integer, character varying, character varying) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
  idu alias for $1;
  cla alias for $2;
  cnu alias for $3;
begin
  perform * from usuarios where usu_id=idu and usu_clave=cla;
  if found then
    update usuarios set usu_clave=cnu where usu_id=idu;
    if found then
      return 1; -- Actualizacion correcta
    else
      return 2; -- Error de actualizacion
    end if;
  else
    return 3; -- Clave anterior incorrecta
  end if;
end;
$_$;


ALTER FUNCTION public.fn_usuarios_cla(integer, character varying, character varying) OWNER TO usringenio;

--
-- TOC entry 2126 (class 0 OID 0)
-- Dependencies: 221
-- Name: FUNCTION fn_usuarios_cla(integer, character varying, character varying); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_usuarios_cla(integer, character varying, character varying) IS 'Funcion que permite cambiar la clave del usuario';


--
-- TOC entry 222 (class 1255 OID 73796)
-- Name: fn_usuarios_del(integer); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_usuarios_del(integer) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
  idu alias for $1;
begin
  delete from usuarios where usu_id=idu;
  if found then
    return 1; -- Se actualizo correctamente el registro
  else
    return 2; -- No se encontro el registro a modificar
  end if;
exception
  when foreign_key_violation then
    return 3; -- Tiene hijos y no se puede eliminar
end;
$_$;


ALTER FUNCTION public.fn_usuarios_del(integer) OWNER TO usringenio;

--
-- TOC entry 2127 (class 0 OID 0)
-- Dependencies: 222
-- Name: FUNCTION fn_usuarios_del(integer); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_usuarios_del(integer) IS 'Funcion que borra los registros de la tabla usuarios';


--
-- TOC entry 223 (class 1255 OID 73797)
-- Name: fn_usuarios_ing(integer); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_usuarios_ing(integer) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
  idu alias for $1;
begin
  update usuarios set usu_ultimoingreso=now() where usu_id=idu;
  if found then
    return 1; -- Se actualizo correctamente el registro
  else
    return 2; -- No existe el usuario a actualizar
  end if;
end;
$_$;


ALTER FUNCTION public.fn_usuarios_ing(integer) OWNER TO usringenio;

--
-- TOC entry 2128 (class 0 OID 0)
-- Dependencies: 223
-- Name: FUNCTION fn_usuarios_ing(integer); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_usuarios_ing(integer) IS 'Funcion que actualiza la fecha del ultimo ingreso del usuario';


--
-- TOC entry 224 (class 1255 OID 73798)
-- Name: fn_usuarios_ins(character varying, character varying, character varying, character varying, character varying, smallint); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION fn_usuarios_ins(character varying, character varying, character varying, character varying, character varying, smallint) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
declare
  cod alias for $1;
  nom alias for $2;
  ape alias for $3;
  cor alias for $4;
  ide alias for $5;
  per alias for $6;
begin
  insert into usuarios values (default, cod, nom, ape, cor, ide, per, default, default, default, default, default, null, null);
  if found then
    return currval('sqc_usuarios'); -- Se ingreso correctamente el registro
  else
    return 0; -- Error de la base de datos
  end if;
exception 
  when unique_violation then
    return -1; -- Si ya existe el codigo a ingresar
  when foreign_key_violation then
    return -2; -- No existe el perfil a asignar
end;
$_$;


ALTER FUNCTION public.fn_usuarios_ins(character varying, character varying, character varying, character varying, character varying, smallint) OWNER TO postgres;

--
-- TOC entry 2129 (class 0 OID 0)
-- Dependencies: 224
-- Name: FUNCTION fn_usuarios_ins(character varying, character varying, character varying, character varying, character varying, smallint); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION fn_usuarios_ins(character varying, character varying, character varying, character varying, character varying, smallint) IS 'Funcion que permite ingresar los registros a la tabla usuarios';


--
-- TOC entry 227 (class 1255 OID 73799)
-- Name: fn_usuarios_sel(smallint, integer, character varying, character varying, character varying, character varying, character varying, smallint, boolean, date, date, boolean, date, date, character varying); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_usuarios_sel(smallint DEFAULT (-1), integer DEFAULT (-1), character varying DEFAULT ''::character varying, character varying DEFAULT ''::character varying, character varying DEFAULT ''::character varying, character varying DEFAULT ''::character varying, character varying DEFAULT ''::character varying, smallint DEFAULT (-1), boolean DEFAULT NULL::boolean, date DEFAULT NULL::date, date DEFAULT NULL::date, boolean DEFAULT NULL::boolean, date DEFAULT NULL::date, date DEFAULT NULL::date, character varying DEFAULT ''::character varying) RETURNS SETOF t_usuarios
    LANGUAGE plpgsql
    AS $_$
declare
  tip alias for $1; -- Tipo de busqueda
  idu alias for $2; -- Id del usuario
  cod alias for $3; -- Codigo
  nom alias for $4; -- Nombres
  ape alias for $5; -- Apellidos
  cor alias for $6; -- Correo
  ide alias for $7; -- Identificacion
  per alias for $8; -- Codigo Perfil
  ccl alias for $9; -- Cambio de clave
  fcr alias for $10; -- Fecha de creacion
  ing alias for $11; -- Fecha de ultimo ingreso
  blo alias for $12; -- Bloqueado
  fbl alias for $13; -- Fecha de bloqueado
  fdb alias for $14; -- Fecha de desbloqueo
  cla alias for $15; -- Clave
  consulta TEXT = 'select usu_id, usu_codigo, usu_nombres, usu_apellidos, usu_correo, usu_identificacion, usu_perfil, perfiles.nombre, perfiles.activo, usu_cambiarclave, usu_fechacreacion, usu_ultimoingreso, usu_bloqueado, usu_fechabloqueado, usu_fechadesbloqueado from usuarios inner join perfiles on usu_perfil=idperfil';
begin
  if tip=0 then -- Consulta de todos los registros
    consulta = consulta;
  elsif tip=1 then -- Consulta por id de usuario
    consulta = consulta || ' where usu_id = ' || idu;
  elsif tip=2 then -- Consulta por codigo de usuario
    consulta = consulta || ' where usu_codigo = ' || quote_literal(cod);
  elsif tip=3 then -- Consulta por nombre de usuario
    consulta = consulta || ' where usu_nombres like ' || quote_literal(nom);
  elsif tip=4 then -- Consulta por apellido de usuario
    consulta = consulta || ' where usu_apellidos like ' || quote_literal(ape);
  elsif tip=5 then -- Consulta por correo
    consulta = consulta || ' where usu_correo like ' || quote_literal(cor);
  elsif tip=6 then -- Consulta por identificacion
    consulta = consulta || ' where usu_identificacion = ' || quote_literal(ide);
  elsif tip=7 then -- Consulta por perfil de usuario
    consulta = consulta || ' where usu_perfil = ' || per;
  elsif tip=8 then -- Consulta por perfil activo o no
    consulta = consulta || ' where perfiles.activo = ' || blo;
  elsif tip=9 then -- Consulta por cambio de clave
    consulta = consulta || ' where usu_cambiarclave = ' || ccl;
  elsif tip=10 then -- Consulta por fecha de creacion exacta
    consulta = consulta || ' where date(usu_fechacreacion) = ' || quote_literal(fcr);
  elsif tip=11 then -- Consulta por fecha de creacion menor o igual a
    consulta = consulta || ' where date(usu_fechacreacion) <= ' || quote_literal(fcr);
  elsif tip=12 then -- Consulta por fecha de creacion mayor o igual
    consulta = consulta || ' where date(usu_fechacreacion) >= ' || quote_literal(fcr);
  elsif tip=13 then -- Consulta por fecha de ingreso exacta
    consulta = consulta || ' where date(usu_ultimoingreso) = ' || quote_literal(ing);
  elsif tip=14 then -- Consulta por fecha de ingreso menor o igual a
    consulta = consulta || ' where date(usu_ultimoingreso) <= ' || quote_literal(ing);
  elsif tip=15 then -- Consulta por fecha de ingreso mayor o igual a
    consulta = consulta || ' where date(usu_ultimoingreso) >= ' || quote_literal(ing);
  elsif tip=16 then -- Consulta por bloqueado
    consulta = consulta || ' where usu_bloqueado = ' || blo;
  elsif tip=17 then -- Consulta de fecha de bloqueo exacta
    consulta = consulta || ' where date(usu_fechabloqueado) = ' || quote_literal(fbl);
  elsif tip=18 then -- Consulta de fecha de bloqueo menor o igual
    consulta = consulta || ' where date(usu_fechabloqueado) <= ' || quote_literal(fbl);
  elsif tip=19 then -- Consulta de fecha de bloqueo mayor o igual
    consulta = consulta || ' where date(usu_fechabloqueado) >= ' || quote_literal(fbl);
  elsif tip=20 then -- Consulta de fecha de desbloqueo exacta
    consulta = consulta || ' where date(usu_fechadesbloqueado) = ' || quote_literal(fdb);
  elsif tip=21 then -- Consulta de fecha de desbloqueo menor o igual
    consulta = consulta || ' where date(usu_fechadesbloqueado) <= ' || quote_literal(fdb);
  elsif tip=22 then -- Consulta de fecha de desbloqueo mayor o igual
    consulta = consulta || ' where date(usu_fechadesbloqueado) >= ' || quote_literal(fdb);
  elsif tip=23 then -- Consulta de autenticacion
    consulta = consulta || ' where usu_codigo = ' || quote_literal(cod) || ' and usu_clave = ' || quote_literal(cla);
  end if;
  return query execute consulta;
end;
$_$;


ALTER FUNCTION public.fn_usuarios_sel(smallint, integer, character varying, character varying, character varying, character varying, character varying, smallint, boolean, date, date, boolean, date, date, character varying) OWNER TO usringenio;

--
-- TOC entry 2130 (class 0 OID 0)
-- Dependencies: 227
-- Name: FUNCTION fn_usuarios_sel(smallint, integer, character varying, character varying, character varying, character varying, character varying, smallint, boolean, date, date, boolean, date, date, character varying); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_usuarios_sel(smallint, integer, character varying, character varying, character varying, character varying, character varying, smallint, boolean, date, date, boolean, date, date, character varying) IS 'Funcion que consulta los registros de la tabla usuarios';


--
-- TOC entry 228 (class 1255 OID 73800)
-- Name: fn_usuarios_upd(integer, character varying, character varying, character varying, character varying, character varying, smallint); Type: FUNCTION; Schema: public; Owner: usringenio
--

CREATE FUNCTION fn_usuarios_upd(integer, character varying, character varying, character varying, character varying, character varying, smallint) RETURNS smallint
    LANGUAGE plpgsql
    AS $_$
declare
  idu alias for $1;
  cod alias for $2;
  nom alias for $3;
  ape alias for $4;
  cor alias for $5;
  ide alias for $6;
  per alias for $7;
begin
  update usuarios set usu_codigo=cod, usu_nombres=nom, usu_apellidos=ape, usu_correo=cor, usu_identificacion = ide, usu_perfil=per where usu_id=idu;
  if found then
    return 1; -- Se actualizo correctamente el registro
  else
    return 2; -- No se encontro el registro a modificar
  end if;
exception
  when foreign_key_violation then
    return 3; -- No existe el perfil a asignar
  when unique_violation then
    return 4; -- No se puede actualizar ese codigo de usuario
end;
$_$;


ALTER FUNCTION public.fn_usuarios_upd(integer, character varying, character varying, character varying, character varying, character varying, smallint) OWNER TO usringenio;

--
-- TOC entry 2131 (class 0 OID 0)
-- Dependencies: 228
-- Name: FUNCTION fn_usuarios_upd(integer, character varying, character varying, character varying, character varying, character varying, smallint); Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON FUNCTION fn_usuarios_upd(integer, character varying, character varying, character varying, character varying, character varying, smallint) IS 'Funcion que actualiza los registros de la tabla usuarios (exceptuando la clave)';


--
-- TOC entry 182 (class 1259 OID 73876)
-- Name: sqc_clientes; Type: SEQUENCE; Schema: public; Owner: usringenio
--

CREATE SEQUENCE sqc_clientes
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sqc_clientes OWNER TO usringenio;

--
-- TOC entry 2132 (class 0 OID 0)
-- Dependencies: 182
-- Name: SEQUENCE sqc_clientes; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON SEQUENCE sqc_clientes IS 'Identificador unico del cliente';


--
-- TOC entry 183 (class 1259 OID 73878)
-- Name: clientes; Type: TABLE; Schema: public; Owner: usringenio; Tablespace: 
--

CREATE TABLE clientes (
    idcliente smallint DEFAULT nextval('sqc_clientes'::regclass) NOT NULL,
    tipodocumento smallint NOT NULL,
    numerodocumento character varying(12) NOT NULL,
    direccion character varying(100) NOT NULL,
    telefono character varying(20) NOT NULL,
    correoelectronico character varying(100) NOT NULL,
    responsable character varying(100) NOT NULL,
    consejo character varying(100) NOT NULL
);


ALTER TABLE public.clientes OWNER TO usringenio;

--
-- TOC entry 2133 (class 0 OID 0)
-- Dependencies: 183
-- Name: TABLE clientes; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON TABLE clientes IS 'Identificación de los clientes. En general es uno solo, pero pueden existir varios en una misma unidad.';


--
-- TOC entry 2134 (class 0 OID 0)
-- Dependencies: 183
-- Name: COLUMN clientes.idcliente; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN clientes.idcliente IS 'Id unico del cliente.';


--
-- TOC entry 2135 (class 0 OID 0)
-- Dependencies: 183
-- Name: COLUMN clientes.tipodocumento; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN clientes.tipodocumento IS 'Tipo de documento';


--
-- TOC entry 2136 (class 0 OID 0)
-- Dependencies: 183
-- Name: COLUMN clientes.numerodocumento; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN clientes.numerodocumento IS 'Numero de documento del cliente';


--
-- TOC entry 2137 (class 0 OID 0)
-- Dependencies: 183
-- Name: COLUMN clientes.direccion; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN clientes.direccion IS 'Direccion principal del cliente';


--
-- TOC entry 2138 (class 0 OID 0)
-- Dependencies: 183
-- Name: COLUMN clientes.telefono; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN clientes.telefono IS 'Telefono principal del cliente';


--
-- TOC entry 2139 (class 0 OID 0)
-- Dependencies: 183
-- Name: COLUMN clientes.correoelectronico; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN clientes.correoelectronico IS 'correo electronico principal del cliente';


--
-- TOC entry 2140 (class 0 OID 0)
-- Dependencies: 183
-- Name: COLUMN clientes.responsable; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN clientes.responsable IS 'Nombre del responsable';


--
-- TOC entry 2141 (class 0 OID 0)
-- Dependencies: 183
-- Name: COLUMN clientes.consejo; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON COLUMN clientes.consejo IS 'Consejo de administración';


--
-- TOC entry 178 (class 1259 OID 73807)
-- Name: objetosxperfil; Type: TABLE; Schema: public; Owner: usringenio; Tablespace: 
--

CREATE TABLE objetosxperfil (
    oxp_perfil smallint NOT NULL,
    oxp_objeto character varying(15) NOT NULL,
    oxp_insertar boolean DEFAULT false NOT NULL,
    oxp_modificar boolean DEFAULT false NOT NULL,
    oxp_borrar boolean DEFAULT false NOT NULL,
    oxp_consultar boolean DEFAULT false NOT NULL
);


ALTER TABLE public.objetosxperfil OWNER TO usringenio;

--
-- TOC entry 2142 (class 0 OID 0)
-- Dependencies: 178
-- Name: TABLE objetosxperfil; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON TABLE objetosxperfil IS 'Estos son los permisos que tendra cada perfil';


--
-- TOC entry 179 (class 1259 OID 73814)
-- Name: prueba; Type: TABLE; Schema: public; Owner: usringenio; Tablespace: 
--

CREATE TABLE prueba (
    hija smallint
);


ALTER TABLE public.prueba OWNER TO usringenio;

--
-- TOC entry 2143 (class 0 OID 0)
-- Dependencies: 179
-- Name: TABLE prueba; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON TABLE prueba IS 'Hola';


--
-- TOC entry 177 (class 1259 OID 73801)
-- Name: sqc_estudiantes; Type: SEQUENCE; Schema: public; Owner: usringenio
--

CREATE SEQUENCE sqc_estudiantes
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sqc_estudiantes OWNER TO usringenio;

--
-- TOC entry 2144 (class 0 OID 0)
-- Dependencies: 177
-- Name: SEQUENCE sqc_estudiantes; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON SEQUENCE sqc_estudiantes IS 'Secuencia del id unico del estudiante';


--
-- TOC entry 180 (class 1259 OID 73817)
-- Name: sqc_usuarios; Type: SEQUENCE; Schema: public; Owner: usringenio
--

CREATE SEQUENCE sqc_usuarios
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.sqc_usuarios OWNER TO usringenio;

--
-- TOC entry 2145 (class 0 OID 0)
-- Dependencies: 180
-- Name: SEQUENCE sqc_usuarios; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON SEQUENCE sqc_usuarios IS 'Secuencia para el consecutivo de usuarios';


--
-- TOC entry 181 (class 1259 OID 73819)
-- Name: usuarios; Type: TABLE; Schema: public; Owner: usringenio; Tablespace: 
--

CREATE TABLE usuarios (
    usu_id integer DEFAULT nextval('sqc_usuarios'::regclass) NOT NULL,
    usu_codigo character varying(25) NOT NULL,
    usu_nombres character varying(50) NOT NULL,
    usu_apellidos character varying(50) NOT NULL,
    usu_correo character varying(100) NOT NULL,
    usu_identificacion character varying(12) NOT NULL,
    usu_perfil smallint NOT NULL,
    usu_clave character varying(32) DEFAULT md5('Clave123+'::text) NOT NULL,
    usu_cambiarclave boolean DEFAULT true NOT NULL,
    usu_fechacreacion timestamp without time zone DEFAULT now() NOT NULL,
    usu_ultimoingreso timestamp without time zone DEFAULT now() NOT NULL,
    usu_bloqueado boolean DEFAULT false NOT NULL,
    usu_fechabloqueado timestamp without time zone,
    usu_fechadesbloqueado timestamp without time zone
);


ALTER TABLE public.usuarios OWNER TO usringenio;

--
-- TOC entry 2146 (class 0 OID 0)
-- Dependencies: 181
-- Name: TABLE usuarios; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON TABLE usuarios IS 'Tabla que contiene los usuarios del sistema. La clave puede ser vacia ya que el metodo de autenticacion puede ser desde LDAP. Pero es necesaria ya que esta tabla es la que contiene los perfiles de los usuarios.';


--
-- TOC entry 2070 (class 0 OID 73878)
-- Dependencies: 183
-- Data for Name: clientes; Type: TABLE DATA; Schema: public; Owner: usringenio
--

COPY clientes (idcliente, tipodocumento, numerodocumento, direccion, telefono, correoelectronico, responsable, consejo) FROM stdin;
1	1	80005465	CRA 94 # 76-82	7583684	info@grouptic.co	ALEXYS LOZADA	SIN
3	1	79123456	CRA 94 # 76-82	7583684	info@grouptic.co	ALEXYS LOZADA	SIN
\.


--
-- TOC entry 2057 (class 0 OID 73743)
-- Dependencies: 170
-- Data for Name: configuracion; Type: TABLE DATA; Schema: public; Owner: usringenio
--

COPY configuracion (idconfiguracion, parametro, valorparametro, activo) FROM stdin;
2	AUTENTICACION	BD	t
3	TIEMPOCREDENCIAL	30	t
5	PRUEBA	ACTUALIZADO CORRECTAMENTE	f
\.


--
-- TOC entry 2059 (class 0 OID 73755)
-- Dependencies: 172
-- Data for Name: credenciales; Type: TABLE DATA; Schema: public; Owner: usringenio
--

COPY credenciales (cre_id, cre_idusuario, cre_nombre, cre_hostip, cre_hostnombre, cre_creacion, cre_ultimaaccion) FROM stdin;
413	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2014-04-02 17:28:15.028	2014-04-02 17:28:15.028
415	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2014-04-02 17:30:14.539	2014-04-02 17:30:14.539
417	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2014-04-02 17:49:17.676	2014-04-02 17:49:17.676
419	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2014-04-02 17:54:29.655	2014-04-02 17:54:29.655
421	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2014-04-02 18:00:57.389	2014-04-02 18:00:57.389
423	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2014-04-02 18:09:41.315	2014-04-02 18:09:41.315
406	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2014-04-02 17:01:22.377	2014-04-02 17:01:22.377
408	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2014-04-02 17:09:46.4	2014-04-02 17:09:46.4
410	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2014-04-02 17:24:00.031	2014-04-02 17:24:00.031
414	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2014-04-02 17:29:19.945	2014-04-02 17:29:19.945
416	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2014-04-02 17:33:27.278	2014-04-02 17:33:27.278
418	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2014-04-02 17:51:35.291	2014-04-02 17:51:35.291
420	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2014-04-02 17:58:44.094	2014-04-02 17:58:44.094
422	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2014-04-02 18:02:20.126	2014-04-02 18:02:20.126
424	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2014-04-02 18:11:12.957	2014-04-02 18:11:12.957
407	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2014-04-02 17:03:36.652	2014-04-02 17:03:36.652
409	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2014-04-02 17:15:55.486	2014-04-02 17:15:55.486
411	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2014-04-02 17:25:50.499	2014-04-02 17:25:50.499
412	4	ALEXYS LOZADA	0:0:0:0:0:0:0:1	0:0:0:0:0:0:0:1	2014-04-02 17:25:56.866	2014-04-02 17:25:56.866
\.


--
-- TOC entry 2060 (class 0 OID 73766)
-- Dependencies: 173
-- Data for Name: objetos; Type: TABLE DATA; Schema: public; Owner: usringenio
--

COPY objetos (obj_codigo, obj_nombre, obj_descripcion, obj_activo) FROM stdin;
SEGPER	PERFILES DEL SISTEMA	PERFILES DEL SISTEMA	t
SEGUSU	USUARIOS DEL SISTEMA	USUARIOS DEL SISTEMA	t
CONFIG	CONFIGURACION DEL SISTEMA	PERMITE LA CONFIGURACION DEL SISTEMA	t
PARTDO	TIPOS DE DOCUMENTOS	TIPOS DE DOCUMENTOS - PARAMETROS	t
\.


--
-- TOC entry 2065 (class 0 OID 73807)
-- Dependencies: 178
-- Data for Name: objetosxperfil; Type: TABLE DATA; Schema: public; Owner: usringenio
--

COPY objetosxperfil (oxp_perfil, oxp_objeto, oxp_insertar, oxp_modificar, oxp_borrar, oxp_consultar) FROM stdin;
3	SEGUSU	f	f	f	f
1	CONFIG	f	f	f	f
2	CONFIG	f	f	f	f
5	CONFIG	f	f	f	f
7	CONFIG	f	f	f	f
3	CONFIG	f	f	f	f
3	SEGPER	t	f	f	f
4	SEGPER	f	f	f	f
4	SEGUSU	f	f	f	f
4	CONFIG	f	f	f	f
6	SEGPER	f	f	f	f
6	SEGUSU	f	f	f	f
6	CONFIG	f	f	f	f
8	SEGPER	f	f	f	f
8	SEGUSU	f	f	f	f
8	CONFIG	f	f	f	f
9	SEGPER	f	f	f	f
9	SEGUSU	f	f	f	f
9	CONFIG	f	f	f	f
10	SEGPER	f	f	f	f
10	SEGUSU	f	f	f	f
10	CONFIG	f	f	f	f
11	SEGPER	f	f	f	f
11	SEGUSU	f	f	f	f
11	CONFIG	f	f	f	f
2	SEGPER	t	t	f	t
2	PARTDO	f	f	f	f
5	PARTDO	f	f	f	f
7	PARTDO	f	f	f	f
3	PARTDO	f	f	f	f
4	PARTDO	f	f	f	f
6	PARTDO	f	f	f	f
8	PARTDO	f	f	f	f
9	PARTDO	f	f	f	f
10	PARTDO	f	f	f	f
11	PARTDO	f	f	f	t
1	PARTDO	t	t	t	t
\.


--
-- TOC entry 2061 (class 0 OID 73777)
-- Dependencies: 174
-- Data for Name: perfiles; Type: TABLE DATA; Schema: public; Owner: usringenio
--

COPY perfiles (idperfil, nombre, activo) FROM stdin;
1	Admin Sistema	t
2	Probando no mas	t
5	Pepito	t
7	jasret	t
3	Prueba Trigger	f
4	LISTOS O QUE	t
6	EXCELENTE	t
8	Cajero	f
9	Mesero	t
10	YA EXPORTO	t
11	RECORDANDO	t
\.


--
-- TOC entry 2066 (class 0 OID 73814)
-- Dependencies: 179
-- Data for Name: prueba; Type: TABLE DATA; Schema: public; Owner: usringenio
--

COPY prueba (hija) FROM stdin;
1
1
1
2
\.


--
-- TOC entry 2147 (class 0 OID 0)
-- Dependencies: 182
-- Name: sqc_clientes; Type: SEQUENCE SET; Schema: public; Owner: usringenio
--

SELECT pg_catalog.setval('sqc_clientes', 3, true);


--
-- TOC entry 2148 (class 0 OID 0)
-- Dependencies: 169
-- Name: sqc_configuracion; Type: SEQUENCE SET; Schema: public; Owner: usringenio
--

SELECT pg_catalog.setval('sqc_configuracion', 5, true);


--
-- TOC entry 2149 (class 0 OID 0)
-- Dependencies: 171
-- Name: sqc_credencial; Type: SEQUENCE SET; Schema: public; Owner: usringenio
--

SELECT pg_catalog.setval('sqc_credencial', 424, true);


--
-- TOC entry 2150 (class 0 OID 0)
-- Dependencies: 177
-- Name: sqc_estudiantes; Type: SEQUENCE SET; Schema: public; Owner: usringenio
--

SELECT pg_catalog.setval('sqc_estudiantes', 1, false);


--
-- TOC entry 2151 (class 0 OID 0)
-- Dependencies: 175
-- Name: sqc_tiposdocumento; Type: SEQUENCE SET; Schema: public; Owner: usringenio
--

SELECT pg_catalog.setval('sqc_tiposdocumento', 32, true);


--
-- TOC entry 2152 (class 0 OID 0)
-- Dependencies: 180
-- Name: sqc_usuarios; Type: SEQUENCE SET; Schema: public; Owner: usringenio
--

SELECT pg_catalog.setval('sqc_usuarios', 4, true);


--
-- TOC entry 2063 (class 0 OID 73787)
-- Dependencies: 176
-- Data for Name: tiposdedocumento; Type: TABLE DATA; Schema: public; Owner: usringenio
--

COPY tiposdedocumento (idtipodedocumento, abreviatura, tipodedocumento, activo) FROM stdin;
1	CC	CÉDULA DE CIUDADANÍA	t
17	DA	DESPUES DE ACTUALIZAR	t
21	LD	LLENANDO DATOS	t
20	BO	BORRADO ACCIDENTAL LISTO	f
18	CA	CON AJAX CASI LISTO	f
24	NP	NUEVA PRUEBA	t
25	DP	DESDE EL PORTATIL	f
26	ML	MAS LISTA	t
27	HD	HASTA DIEZ	t
28	IO	INCLUSO HASTA ONCE	f
29	CR	CREO QUE YA	t
31	MD	MAS PARA DECIDIR	t
32	ND	NUEVO DISEÑO	t
\.


--
-- TOC entry 2068 (class 0 OID 73819)
-- Dependencies: 181
-- Data for Name: usuarios; Type: TABLE DATA; Schema: public; Owner: usringenio
--

COPY usuarios (usu_id, usu_codigo, usu_nombres, usu_apellidos, usu_correo, usu_identificacion, usu_perfil, usu_clave, usu_cambiarclave, usu_fechacreacion, usu_ultimoingreso, usu_bloqueado, usu_fechabloqueado, usu_fechadesbloqueado) FROM stdin;
3	admin	ADMINISTRADOR	DEL SISTEMA	ALEXYSLC@GMAIL.COM	SIN	1	2f44b6ae8477301c2c38b58f13e3b017	t	2013-04-13 14:05:23.716	2013-04-13 14:05:23.716	f	\N	\N
4	alozada	ALEXYS	LOZADA	ALEXYSLC@GMAIL.COM	80005465	1	7119f780adf6a6b95e1ce1887d29dec4	t	2013-04-13 14:09:42.274	2013-04-13 14:09:42.274	f	\N	\N
\.


--
-- TOC entry 2028 (class 2606 OID 73829)
-- Name: objetos_pkey; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY objetos
    ADD CONSTRAINT objetos_pkey PRIMARY KEY (obj_codigo);


--
-- TOC entry 2046 (class 2606 OID 73896)
-- Name: pk_cliente_id; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY clientes
    ADD CONSTRAINT pk_cliente_id PRIMARY KEY (idcliente);


--
-- TOC entry 2024 (class 2606 OID 73831)
-- Name: pk_configuracion; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY configuracion
    ADD CONSTRAINT pk_configuracion PRIMARY KEY (idconfiguracion);


--
-- TOC entry 2026 (class 2606 OID 73833)
-- Name: pk_cre_id; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY credenciales
    ADD CONSTRAINT pk_cre_id PRIMARY KEY (cre_id);


--
-- TOC entry 2038 (class 2606 OID 73837)
-- Name: pk_oxp_oxp; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY objetosxperfil
    ADD CONSTRAINT pk_oxp_oxp PRIMARY KEY (oxp_perfil, oxp_objeto);


--
-- TOC entry 2030 (class 2606 OID 73839)
-- Name: pk_per_id; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY perfiles
    ADD CONSTRAINT pk_per_id PRIMARY KEY (idperfil);


--
-- TOC entry 2032 (class 2606 OID 73841)
-- Name: pk_tiposdedocumento; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY tiposdedocumento
    ADD CONSTRAINT pk_tiposdedocumento PRIMARY KEY (idtipodedocumento);


--
-- TOC entry 2040 (class 2606 OID 73843)
-- Name: pk_usuario; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY usuarios
    ADD CONSTRAINT pk_usuario PRIMARY KEY (usu_id);


--
-- TOC entry 2034 (class 2606 OID 73845)
-- Name: uk_abr_tiposdedocumento; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY tiposdedocumento
    ADD CONSTRAINT uk_abr_tiposdedocumento UNIQUE (abreviatura);


--
-- TOC entry 2048 (class 2606 OID 73921)
-- Name: uk_clientes_numeroidentificacion; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY clientes
    ADD CONSTRAINT uk_clientes_numeroidentificacion UNIQUE (numerodocumento);


--
-- TOC entry 2153 (class 0 OID 0)
-- Dependencies: 2048
-- Name: CONSTRAINT uk_clientes_numeroidentificacion ON clientes; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON CONSTRAINT uk_clientes_numeroidentificacion ON clientes IS 'Numero de identificación unico';


--
-- TOC entry 2036 (class 2606 OID 73849)
-- Name: uk_tdd_tiposdedocumento; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY tiposdedocumento
    ADD CONSTRAINT uk_tdd_tiposdedocumento UNIQUE (tipodedocumento);


--
-- TOC entry 2042 (class 2606 OID 73851)
-- Name: uk_usu_cod; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY usuarios
    ADD CONSTRAINT uk_usu_cod UNIQUE (usu_codigo);


--
-- TOC entry 2044 (class 2606 OID 73853)
-- Name: uk_usu_ide; Type: CONSTRAINT; Schema: public; Owner: usringenio; Tablespace: 
--

ALTER TABLE ONLY usuarios
    ADD CONSTRAINT uk_usu_ide UNIQUE (usu_identificacion);


--
-- TOC entry 2054 (class 2620 OID 73854)
-- Name: tr_objetosxperfil_obj; Type: TRIGGER; Schema: public; Owner: usringenio
--

CREATE TRIGGER tr_objetosxperfil_obj AFTER INSERT ON objetos FOR EACH ROW EXECUTE PROCEDURE fn_objetosxperfil_triupdobj();


--
-- TOC entry 2154 (class 0 OID 0)
-- Dependencies: 2054
-- Name: TRIGGER tr_objetosxperfil_obj ON objetos; Type: COMMENT; Schema: public; Owner: usringenio
--

COMMENT ON TRIGGER tr_objetosxperfil_obj ON objetos IS 'Cada vez que se ingresa un nuevo registro a la tabla objetos, se crean los registros en la tabla objetosxperfil para cada perfil';


--
-- TOC entry 2055 (class 2620 OID 73855)
-- Name: tr_objetosxperfil_per; Type: TRIGGER; Schema: public; Owner: usringenio
--

CREATE TRIGGER tr_objetosxperfil_per AFTER INSERT ON perfiles FOR EACH ROW EXECUTE PROCEDURE fn_objetosxperfil_triupdper();


--
-- TOC entry 2053 (class 2606 OID 73910)
-- Name: fk_cliente_tipodocumento; Type: FK CONSTRAINT; Schema: public; Owner: usringenio
--

ALTER TABLE ONLY clientes
    ADD CONSTRAINT fk_cliente_tipodocumento FOREIGN KEY (tipodocumento) REFERENCES tiposdedocumento(idtipodedocumento) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 2051 (class 2606 OID 73856)
-- Name: fk_prueba; Type: FK CONSTRAINT; Schema: public; Owner: usringenio
--

ALTER TABLE ONLY prueba
    ADD CONSTRAINT fk_prueba FOREIGN KEY (hija) REFERENCES perfiles(idperfil) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 2052 (class 2606 OID 73861)
-- Name: fk_usu_per; Type: FK CONSTRAINT; Schema: public; Owner: usringenio
--

ALTER TABLE ONLY usuarios
    ADD CONSTRAINT fk_usu_per FOREIGN KEY (usu_perfil) REFERENCES perfiles(idperfil) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 2049 (class 2606 OID 73866)
-- Name: objetosxperfil_oxp_objetos_fkey; Type: FK CONSTRAINT; Schema: public; Owner: usringenio
--

ALTER TABLE ONLY objetosxperfil
    ADD CONSTRAINT objetosxperfil_oxp_objetos_fkey FOREIGN KEY (oxp_objeto) REFERENCES objetos(obj_codigo) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 2050 (class 2606 OID 73871)
-- Name: objetosxperfil_oxp_perfil_fkey; Type: FK CONSTRAINT; Schema: public; Owner: usringenio
--

ALTER TABLE ONLY objetosxperfil
    ADD CONSTRAINT objetosxperfil_oxp_perfil_fkey FOREIGN KEY (oxp_perfil) REFERENCES perfiles(idperfil) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- TOC entry 2078 (class 0 OID 0)
-- Dependencies: 6
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


-- Completed on 2014-04-02 18:15:16

--
-- PostgreSQL database dump complete
--

